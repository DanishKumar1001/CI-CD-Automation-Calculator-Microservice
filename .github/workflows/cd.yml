name: CD

on:
  push:
    branches: [ main ]
    paths:
      - "calculator.js"
      - "Dockerfile"
      - "deployment.yaml"
      - "service.yaml"
      - ".github/workflows/cd.yml"
      - "package.json"
      - "package-lock.json"

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # needed to later switch to Workload Identity Federation
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Auth to GCP (Service Account key) ----------
      - name: Set up gcloud with SA key
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # (Optional) Workload Identity Federation (more secure)
      # - name: Auth to GCP (WIF)
      #   uses: google-github-actions/auth@v2
      #   with:
      #     workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
      #     service_account: ${{ secrets.DEPLOY_SA_EMAIL }}
      #     project_id: ${{ vars.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ vars.REGION }}-docker.pkg.dev --quiet

      - name: Build and push container image
        run: |
          IMAGE_URI="${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPO_NAME }}/${{ vars.IMAGE_NAME }}"
          docker build -t "$IMAGE_URI:${{ env.IMAGE_TAG }}" .
          docker push "$IMAGE_URI:${{ env.IMAGE_TAG }}"
          # Also push a moving tag for convenience (optional)
          docker tag "$IMAGE_URI:${{ env.IMAGE_TAG }}" "$IMAGE_URI:latest"
          docker push "$IMAGE_URI:latest"

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ vars.CLUSTER_NAME }}
          location: ${{ vars.REGION }}
          project_id: ${{ vars.PROJECT_ID }}

      - name: Ensure namespace exists
        run: |
          kubectl get ns ${{ vars.K8S_NAMESPACE }} || kubectl create ns ${{ vars.K8S_NAMESPACE }}

      - name: Apply Kubernetes manifests
        run: |
          # Apply your app manifests (Calculator)
          # Secrets & Mongo manifests should already be applied/managed separately
          kubectl -n ${{ vars.K8S_NAMESPACE }} apply -f deployment.yaml
          kubectl -n ${{ vars.K8S_NAMESPACE }} apply -f service.yaml

      - name: Update image and rollout
        run: |
          IMAGE_URI="${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPO_NAME }}/${{ vars.IMAGE_NAME }}"
          kubectl -n ${{ vars.K8S_NAMESPACE }} set image deployment/calculator-microservice \
            calculator-microservice="$IMAGE_URI:${{ env.IMAGE_TAG }}"
          kubectl -n ${{ vars.K8S_NAMESPACE }} rollout status deployment/calculator-microservice --timeout=180s

      # automatic rollback if rollout fails
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rollout failed. Attempting rollbackâ€¦"
          kubectl -n ${{ vars.K8S_NAMESPACE }} rollout undo deployment/calculator-microservice || true
